plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = '1.0'
group = 'de.kytodragon.live_edit'
archivesBaseName = 'live_edit'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.19.2'
    runs {
        client {
            workingDirectory project.file('run')
            jvmArg "-XX:+AllowEnhancedClassRedefinition"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'warn'
            property 'forge.enabledGameTestNamespaces', 'live_edit'

            mods {
                live_edit {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            jvmArg "-XX:+AllowEnhancedClassRedefinition"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'warn'
            property 'forge.enabledGameTestNamespaces', 'live_edit'

            mods {
                live_edit {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'live_edit'

            mods {
                live_edit {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'live_edit', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                live_edit {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        resources {
            include '**/**'
            //Add the generated main module resources
            srcDirs += ['src/generated/resources']
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
    }
}


repositories {
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }

    maven {
        url 'https://cursemaven.com'
    }

    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.3.2'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "live_edit",
                "Specification-Vendor"    : "KytoDragon",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "KytoDragon",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'live_edit.mixins.refmap.json'
    config 'live_edit.mixins.json'

    //debug.verbose = true
    //debug.export = true
    dumpTargetOnFailure = true

    // Options for the Annotation Processor
    //quiet
}

minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
